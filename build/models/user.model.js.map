{"version":3,"sources":["../../src/models/user.model.js"],"names":["crypto","require","mongoose","Schema","UserSchema","name","String","username","email","password","methods","hashPassword","length","salt","Buffer","process","env","HASH_SECRET","key","pbkdf2Sync","toString","verifyPassword","UserModel","model"],"mappings":";;;;;AAAA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,SAASD,SAASC,MAAxB;;AAEA,IAAMC,aAAa,IAAID,MAAJ,CAAW;AAC7BE,OAAMC,MADuB;AAE7BC,WAAUD,MAFmB;AAG7BE,QAAOF,MAHsB;AAI7BG,WAAUH;AAJmB,CAAX,CAAnB;;AAOA;;;;;AAKAF,WAAWM,OAAX,CAAmBC,YAAnB,GAAkC,YAAsB;AAAA,KAAbC,MAAa,uEAAJ,EAAI;;AACvD,KAAMC,OAAO,IAAIC,MAAJ,CAAW,IAAIR,MAAJ,CAAWS,QAAQC,GAAR,CAAYC,WAAvB,CAAX,EAAgD,QAAhD,CAAb;AACA,KAAMN,eAAe,IAAIG,MAAJ,CAAW,IAAIR,MAAJ,CAAW,KAAKG,QAAhB,CAAX,EAAsC,QAAtC,CAArB;AACA,KAAMS,MAAMlB,OAAOmB,UAAP,CAAkBR,YAAlB,EAAgCE,IAAhC,EAAsC,MAAtC,EAA8CD,MAA9C,EAAsD,QAAtD,CAAZ;AACA,MAAKH,QAAL,GAAgBS,IAAIE,QAAJ,CAAa,KAAb,CAAhB;AACA,QAAO,IAAP;AACA,CAND;;AAQAhB,WAAWM,OAAX,CAAmBW,cAAnB,GAAoC,UAASZ,QAAT,EAAgC;AAAA,KAAbG,MAAa,uEAAJ,EAAI;;AACnE,KAAMC,OAAO,IAAIC,MAAJ,CAAW,IAAIR,MAAJ,CAAWS,QAAQC,GAAR,CAAYC,WAAvB,CAAX,EAAgD,QAAhD,CAAb;AACA,KAAMN,eAAe,IAAIG,MAAJ,CAAW,IAAIR,MAAJ,CAAWG,QAAX,CAAX,EAAiC,QAAjC,CAArB;AACA,KAAMS,MAAMlB,OAAOmB,UAAP,CAAkBV,QAAlB,EAA4BI,IAA5B,EAAkC,MAAlC,EAA0CD,MAA1C,EAAkD,QAAlD,CAAZ;AACA,KAAG,KAAKH,QAAL,KAAkBS,IAAIE,QAAJ,CAAa,KAAb,CAArB,EAA0C;AACzC,SAAO,IAAP;AACA;AACD,QAAO,KAAP;AACA,CARD;;AAWA,IAAME,YAAYpB,SAASqB,KAAT,CAAe,MAAf,EAAuBnB,UAAvB,CAAlB;;kBAEekB,S","file":"user.model.js","sourcesContent":["const crypto = require('crypto')\nconst mongoose = require('mongoose')\nconst Schema = mongoose.Schema\n\nconst UserSchema = new Schema({\n\tname: String,\n\tusername: String,\n\temail: String,\n\tpassword: String\n})\n\n/*\n\tMethod's to encrypt and decrypt the password\n\t@params {password}\n\t@return {hashed password}\n*/\nUserSchema.methods.hashPassword = function(length = 64) {\n\tconst salt = new Buffer(new String(process.env.HASH_SECRET), 'base64')\n\tconst hashPassword = new Buffer(new String(this.password), 'base64')\n\tconst key = crypto.pbkdf2Sync(hashPassword, salt, 100000, length, 'sha512')\n\tthis.password = key.toString('hex')\n\treturn true\n}\n\nUserSchema.methods.verifyPassword = function(password, length = 64) {\n\tconst salt = new Buffer(new String(process.env.HASH_SECRET), 'base64')\n\tconst hashPassword = new Buffer(new String(password), 'base64')\n\tconst key = crypto.pbkdf2Sync(password, salt, 100000, length, 'sha512')\n\tif(this.password === key.toString('hex')) {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nconst UserModel = mongoose.model('user', UserSchema)\n\nexport default UserModel\n"]}