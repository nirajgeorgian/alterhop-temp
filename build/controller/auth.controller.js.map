{"version":3,"sources":["../../src/controller/auth.controller.js"],"names":["signup","req","res","data","body","user","User","hashPassword","save","login","UserModel","findOne","username","verified","verifyPassword","password","token","jwt","sign","id","email","expiresIn","send"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEO,IAAMA;AAAA,oEAAS,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,UADe,GACRD,IAAIE,IADI;AAEfC,UAFe,GAER,IAAIC,IAAJ,CAASH,IAAT,CAFQ;;AAGrBE,WAAKE,YAAL;AAHqB;AAAA,aAIfF,KAAKG,IAAL,EAJe;;AAAA;AAAA,uCAKd,wBAAS,IAAT,EAAeH,IAAf,CALc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAQA,IAAMI;AAAA,qEAAQ,kBAAOR,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,UADc,GACPF,IAAIG,IADG;AAEdC,UAFc,GAEPK,eAAUC,OAAV,CAAkB,EAAEC,UAAUT,KAAKS,QAAjB,EAAlB,CAFO;;AAAA,UAGhBP,IAHgB;AAAA;AAAA;AAAA;;AAAA,wCAIZ,wBAAS,KAAT,4BAAuCA,KAAKO,QAA5C,CAJY;;AAAA;AAMdC,cANc,GAMHR,KAAKS,cAAL,CAAoBX,KAAKY,QAAzB,CANG;;AAAA,UAOhBF,QAPgB;AAAA;AAAA;AAAA;;AAAA,wCAQZ,wBAAS,KAAT,6CAAyDV,KAAKY,QAA9D,CARY;;AAAA;AAUdC,WAVc,GAUNC,uBAAIC,IAAJ,CAAS;AACtBC,WAAId,KAAKc,EADa;AAEtBC,cAAOf,KAAKe,KAFU;AAGtBR,iBAAUP,KAAKO;AAHO,OAAT,EAIX,cAJW,EAIK,EAAES,WAAW,IAAb,EAJL,CAVM;AAAA,wCAebnB,IAAIoB,IAAJ,CAAS,wBAAS,IAAT,EAAeN,KAAf,CAAT,CAfa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAR;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"auth.controller.js","sourcesContent":["import jwt from 'jsonwebtoken'\nimport UserModel from '../models/user.model'\nimport response from '../util/response.response'\n\nexport const signup = async (req, res) => {\n\tconst data = res.body\n\tconst user = new User(data)\n\tuser.hashPassword()\n\tawait user.save()\n\treturn response(true, user)\n}\n\nexport const login = async (req, res) => {\n\tconst data = req.body\n\tconst user = UserModel.findOne({ username: data.username })\n\tif(!user) {\n\t\treturn response(false, `No User exist's for ${user.username}`)\n\t}\n\tconst verified = user.verifyPassword(data.password)\n\tif(!verified) {\n\t\treturn response(false, `Sorry the password did not matched:=> ${data.password}`)\n\t}\n\tconst token = jwt.sign({\n\t\tid: user.id,\n\t\temail: user.email,\n\t\tusername: user.username\n\t}, 'Random@!@#45', { expiresIn: '1h' })\n\treturn res.send(response(true, token))\n}\n"]}