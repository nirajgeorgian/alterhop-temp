{"version":3,"sources":["../../src/util/authverify.middleware.js"],"names":["isRevokedCallback","req","payload","done","issuer","iss","tokenId","jti","data","getRevokedToken","err","token","revoke","res","next","secret","process","env","JWT_SECRET","isRevoked","verify","credentialsRequired","getToken","fromHeaderOrQuerystring","headers","authorization","split","query"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAIA,oBAAoB,SAApBA,iBAAoB,CAASC,GAAT,EAAcC,OAAd,EAAuBC,IAAvB,EAA6B;AACnD,MAAIC,SAASF,QAAQG,GAArB;AACA,MAAIC,UAAUJ,QAAQK,GAAtB;;AAEAC,OAAKC,eAAL,CAAqBL,MAArB,EAA6BE,OAA7B,EAAsC,UAASI,GAAT,EAAcC,KAAd,EAAqB;AACzD,QAAID,GAAJ,EAAS;AACP,aAAOP,KAAKO,GAAL,CAAP;AACD;AACD,WAAOP,KAAK,IAAL,EAAW,CAAC,CAACQ,KAAb,CAAP;AACD,GALD;AAMD,CAVD;;AAYO,IAAMC,0BAAS,SAATA,MAAS,CAACX,GAAD,EAAMY,GAAN,EAAWC,IAAX,EAAoB;AACxC,4BAAM;AACJC,YAAQC,QAAQC,GAAR,CAAYC,UADhB;AAEJC,eAAWnB;AAFP,GAAN;AAID,CALM;;AAOA,IAAMoB,0BAAS,SAATA,MAAS,CAACnB,GAAD,EAAMY,GAAN,EAAWC,IAAX,EAAoB;AACxC,4BAAM;AACJC,YAAQC,QAAQC,GAAR,CAAYC,UADhB;AAEJG,yBAAqB,KAFjB;AAGJC,cAAU,SAASC,uBAAT,CAAiCtB,GAAjC,EAAsC;AAC9C,UAAGA,IAAIuB,OAAJ,CAAYC,aAAZ,IAA6BxB,IAAIuB,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,MAA4C,QAA5E,EAAsF;AACpF,eAAOzB,IAAIuB,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAP;AACD,OAFD,MAGK,IAAGzB,IAAI0B,KAAJ,IAAa1B,IAAI0B,KAAJ,CAAUhB,KAA1B,EAAiC;AACpC,eAAOV,IAAI0B,KAAJ,CAAUhB,KAAjB;AACD;AACD,aAAO,IAAP;AACD;AAXG,GAAN;AAaD,CAdM","file":"authverify.middleware.js","sourcesContent":["import exjwt from 'express-jwt'\n\nvar isRevokedCallback = function(req, payload, done) {\n  var issuer = payload.iss\n  var tokenId = payload.jti\n\n  data.getRevokedToken(issuer, tokenId, function(err, token) {\n    if (err) {\n      return done(err)\n    }\n    return done(null, !!token)\n  })\n}\n\nexport const revoke = (req, res, next) => {\n  exjwt({\n    secret: process.env.JWT_SECRET,\n    isRevoked: isRevokedCallback\n  })\n}\n\nexport const verify = (req, res, next) => {\n  exjwt({\n    secret: process.env.JWT_SECRET,\n    credentialsRequired: false,\n    getToken: function fromHeaderOrQuerystring(req) {\n      if(req.headers.authorization && req.headers.authorization.split(\" \")[0] === \"Bearer\") {\n        return req.headers.authorization.split(\" \")[1]\n      }\n      else if(req.query && req.query.token) {\n        return req.query.token\n      }\n      return null\n    }\n  })\n}\n"]}