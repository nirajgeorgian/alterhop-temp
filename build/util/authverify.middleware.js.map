{"version":3,"sources":["../../src/util/authverify.middleware.js"],"names":["isRevokedCallback","req","payload","done","issuer","iss","tokenId","jti","data","getRevokedToken","err","token","revoke","res","next","secret","isRevoked","verify","credentialsRequired","getToken","fromHeaderOrQuerystring","headers","authorization","split","query"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAIA,oBAAoB,SAApBA,iBAAoB,CAASC,GAAT,EAAcC,OAAd,EAAuBC,IAAvB,EAA6B;AACnD,MAAIC,SAASF,QAAQG,GAArB;AACA,MAAIC,UAAUJ,QAAQK,GAAtB;;AAEAC,OAAKC,eAAL,CAAqBL,MAArB,EAA6BE,OAA7B,EAAsC,UAASI,GAAT,EAAcC,KAAd,EAAqB;AACzD,QAAID,GAAJ,EAAS;AACP,aAAOP,KAAKO,GAAL,CAAP;AACD;AACD,WAAOP,KAAK,IAAL,EAAW,CAAC,CAACQ,KAAb,CAAP;AACD,GALD;AAMD,CAVD;;AAYO,IAAMC,0BAAS,SAATA,MAAS,CAACX,GAAD,EAAMY,GAAN,EAAWC,IAAX,EAAoB;AACxC,SAAO,0BAAM;AACXC,YAAQ,cADG;AAEXC,eAAWhB;AAFA,GAAN,CAAP;AAID,CALM;;AAOA,IAAMiB,0BAAS,0BAAM;AAC1BF,UAAQ,cADkB;AAE1BG,uBAAqB,KAFK;AAG1BC,YAAU,SAASC,uBAAT,CAAiCnB,GAAjC,EAAsC;AAC9C,QAAGA,IAAIoB,OAAJ,CAAYC,aAAZ,IAA6BrB,IAAIoB,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,MAA4C,QAA5E,EAAsF;AACpF,aAAOtB,IAAIoB,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAP;AACD,KAFD,MAGK,IAAGtB,IAAIuB,KAAJ,IAAavB,IAAIuB,KAAJ,CAAUb,KAA1B,EAAiC;AACpC,aAAOV,IAAIuB,KAAJ,CAAUb,KAAjB;AACD;AACD,WAAO,IAAP;AACD;AAXyB,CAAN,CAAf","file":"authverify.middleware.js","sourcesContent":["import exjwt from 'express-jwt'\n\nvar isRevokedCallback = function(req, payload, done) {\n  var issuer = payload.iss\n  var tokenId = payload.jti\n\n  data.getRevokedToken(issuer, tokenId, function(err, token) {\n    if (err) {\n      return done(err)\n    }\n    return done(null, !!token)\n  })\n}\n\nexport const revoke = (req, res, next) => {\n  return exjwt({\n    secret: 'dodoN9@#*%()',\n    isRevoked: isRevokedCallback\n  })\n}\n\nexport const verify = exjwt({\n  secret: 'dodoN9@#*%()',\n  credentialsRequired: false,\n  getToken: function fromHeaderOrQuerystring(req) {\n    if(req.headers.authorization && req.headers.authorization.split(\" \")[0] === \"Bearer\") {\n      return req.headers.authorization.split(\" \")[1]\n    }\n    else if(req.query && req.query.token) {\n      return req.query.token\n    }\n    return null\n  }\n})\n"]}