{"version":3,"sources":["../../src/controller/auth.controller.js"],"names":["signup","req","res","data","body","user","UserModel","hashPassword","save","status","send","login","findOne","username","verified","verifyPassword","password","console","log","token","jwt","sign","id","email","process","env","JWT_SECRET","expiresIn"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEO,IAAMA;AAAA,oEAAS,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,UADe,GACRF,IAAIG,IADI;AAEfC,UAFe,GAER,IAAIC,cAAJ,CAAcH,IAAd,CAFQ;;AAGrBE,WAAKE,YAAL;AAHqB;AAAA,aAIfF,KAAKG,IAAL,EAJe;;AAAA;AAAA,uCAKdN,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAAS,IAAT,EAAeL,IAAf,CAArB,CALc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAQA,IAAMM;AAAA,qEAAQ,kBAAOV,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,UADc,GACPF,IAAIG,IADG;AAAA;AAAA,aAEDE,eAAUM,OAAV,CAAkB,EAAEC,UAAUV,KAAKU,QAAjB,EAAlB,CAFC;;AAAA;AAEdR,UAFc;;AAAA,UAGhBA,IAHgB;AAAA;AAAA;AAAA;;AAAA;AAAA,aAINH,IAAIQ,IAAJ,CAAS,wBAAS,KAAT,4BAAuCP,KAAKU,QAA5C,CAAT,CAJM;;AAAA;AAAA;;AAAA;AAMdC,cANc,GAMHT,KAAKU,cAAL,CAAoBZ,KAAKa,QAAzB,CANG;;AAOpBC,cAAQC,GAAR,CAAYJ,QAAZ;;AAPoB,UAQhBA,QARgB;AAAA;AAAA;AAAA;;AAAA,wCASZZ,IAAIQ,IAAJ,CAAS,wBAAS,KAAT,6CAAyDP,KAAKa,QAA9D,CAAT,CATY;;AAAA;AAWdG,WAXc,GAWNC,uBAAIC,IAAJ,CAAS;AACtBC,WAAIjB,KAAKiB,EADa;AAEtBC,cAAOlB,KAAKkB,KAFU;AAGtBV,iBAAUR,KAAKQ;AAHO,OAAT,EAIXW,QAAQC,GAAR,CAAYC,UAJD,EAIa,EAAEC,WAAW,IAAb,EAJb,CAXM;AAAA,wCAgBbzB,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAAS,IAAT,EAAeS,KAAf,CAArB,CAhBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAR;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"auth.controller.js","sourcesContent":["import jwt from 'jsonwebtoken'\nimport UserModel from '../models/user.model'\nimport response from '../util/response.response'\n\nexport const signup = async (req, res) => {\n\tconst data = req.body\n\tconst user = new UserModel(data)\n\tuser.hashPassword()\n\tawait user.save()\n\treturn res.status(201).send(response(true, user))\n}\n\nexport const login = async (req, res) => {\n\tconst data = req.body\n\tconst user = await UserModel.findOne({ username: data.username })\n\tif(!user) {\n\t\treturn await res.send(response(false, `No User exist's for ${data.username}`))\n\t}\n\tconst verified = user.verifyPassword(data.password)\n\tconsole.log(verified);\n\tif(!verified) {\n\t\treturn res.send(response(false, `Sorry the password did not matched:=> ${data.password}`))\n\t}\n\tconst token = jwt.sign({\n\t\tid: user.id,\n\t\temail: user.email,\n\t\tusername: user.username\n\t}, process.env.JWT_SECRET, { expiresIn: '1h' })\n\treturn res.status(200).send(response(true, token))\n}\n"]}