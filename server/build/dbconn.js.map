{"version":3,"sources":["../src/dbconn.js"],"names":["require","config","mongoUrl","process","env","MONGO_URL","MONGO_DB","mongoose","set","mongooseConnect","connect","autoReconnect","useNewUrlParser","connectTimeoutMS","mongodb","connection","mongoConnect","Promise","resolve","reject","once","stdout","write","on","error","stderr","Error","dbDisconnect","disconnect","done","resolveAll"],"mappings":";;;;;;;AACA;;;;;;;;AADAA,QAAQ,QAAR,EAAkBC,MAAlB;;;AAGA;;;;AAIA,IAAMC,WAAcC,QAAQC,GAAR,CAAYC,SAA1B,SAAuCF,QAAQC,GAAR,CAAYE,QAAzD;AACAC,mBAASC,GAAT,CAAa,gBAAb,EAA+B,KAA/B;AACA,IAAMC,kBAAkBF,mBAASG,OAAT,CAAiBR,QAAjB,EAA2B,EAAES,eAAe,IAAjB,EAAuBC,iBAAiB,IAAxC,EAA8CC,kBAAkB,IAAhE,EAA3B,CAAxB;AACA,IAAMC,UAAUP,mBAASQ,UAAzB;AACA,IAAMC,eAAe,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrDL,SAAQM,IAAR,CAAa,MAAb,EAAqB,YAAM;AAC1BjB,UAAQkB,MAAR,CAAeC,KAAf,gCAAwCpB,QAAxC;AACAgB,UAAQJ,OAAR;AACA,EAHD;AAIAA,SAAQS,EAAR,CAAW,OAAX,EAAoB,UAACC,KAAD,EAAW;AAC9BrB,UAAQsB,MAAR,CAAeH,KAAf,CAAqB,6CAArB;AACAnB,UAAQsB,MAAR,CAAeH,KAAf,CAAwBE,KAAxB;AACAL,SAAO,IAAIO,KAAJ,CAAU,6BAAV,CAAP;AACA,EAJD;AAKA,CAVoB,CAArB;;AAYA;AACA,IAAMC,eAAe,SAAfA,YAAe,OAAQ;AAC5BpB,oBAASqB,UAAT,CAAoBC,IAApB;AACA,CAFD;;AAIA,IAAMC;AAAA,oEAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACZd,YADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;QAKCc,U,GAAAA,U;QACAH,Y,GAAAA,Y","file":"dbconn.js","sourcesContent":["require('dotenv').config()\nimport mongoose from 'mongoose'\n\n/*\n\t@mongodb connection\n\tDatabase connection for nosql database\n*/\nconst mongoUrl = `${process.env.MONGO_URL}/${process.env.MONGO_DB}`\nmongoose.set('bufferCommands', false)\nconst mongooseConnect = mongoose.connect(mongoUrl, { autoReconnect: true, useNewUrlParser: true, connectTimeoutMS: 1000 })\nconst mongodb = mongoose.connection\nconst mongoConnect = new Promise((resolve, reject) => {\n\tmongodb.once('open', () => {\n\t\tprocess.stdout.write(`ðŸš€ Connected to ${mongoUrl} nosql mongo database \\n`)\n\t\tresolve(mongodb)\n\t})\n\tmongodb.on('error', (error) => {\n\t\tprocess.stderr.write('Error occured during database connection \\n')\n\t\tprocess.stderr.write(`${error} \\n`)\n\t\treject(new Error(\"Error connection to mongodb\"))\n\t})\n})\n\n/* mongoose disconnect connection used for testing */\nconst dbDisconnect = done => {\n\tmongoose.disconnect(done)\n}\n\nconst resolveAll = async () => {\n\tawait mongoConnect\n}\n\nexport {\n\tresolveAll,\n\tdbDisconnect\n}\n"]}